// import * as XLSX from "xlsx";
// import { saveAs } from "file-saver";

// export const handleExportWithTemplate = async (data) => {
//   try {
//     // 1Ô∏è‚É£ ƒê·ªçc file m·∫´u t·ª´ public/template.xlsx
//     const response = await fetch("/PO.xlsx");
//     const arrayBuffer = await response.arrayBuffer();
//     const workbook = XLSX.read(arrayBuffer, { type: "array" });

//     let worksheet = workbook.Sheets[workbook.SheetNames[0]]; // L·∫•y sheet ƒë·∫ßu ti√™n
//     let templateHeaders = XLSX.utils.sheet_to_json(worksheet, { header: 1 })[0]; // L·∫•y ti√™u ƒë·ªÅ t·ª´ file m·∫´u

//     console.log("üìå Ti√™u ƒë·ªÅ trong file m·∫´u:", templateHeaders);

//     // 2Ô∏è‚É£ L·∫•y ti√™u ƒë·ªÅ t·ª´ d·ªØ li·ªáu hi·ªán t·∫°i
//     let dataHeaders = data[0]; // Ti√™u ƒë·ªÅ c·ªßa d·ªØ li·ªáu ƒë·∫ßu v√†o

//     console.log("üìå Ti√™u ƒë·ªÅ t·ª´ d·ªØ li·ªáu:", dataHeaders);

//     // 3Ô∏è‚É£ Gh√©p d·ªØ li·ªáu theo ti√™u ƒë·ªÅ file m·∫´u
//     let formattedData = data.slice(1).map((row) => {
//       let newRow = [];
//       templateHeaders.forEach((header, index) => {
//         let colIndex = dataHeaders.indexOf(header); // T√¨m v·ªã tr√≠ c·ªßa ti√™u ƒë·ªÅ trong d·ªØ li·ªáu
//         newRow[index] = colIndex !== -1 ? row[colIndex] : ""; // N·∫øu kh√¥ng t√¨m th·∫•y th√¨ ƒë·ªÉ tr·ªëng
//       });
//       return newRow;
//     });

//     // 4Ô∏è‚É£ N·∫øu d·ªØ li·ªáu c√≥ th√™m c·ªôt m·ªõi, b·ªï sung v√†o ti√™u ƒë·ªÅ file m·∫´u
//     dataHeaders.forEach((header) => {
//       if (!templateHeaders.includes(header)) {
//         templateHeaders.push(header);
//       }
//     });

//     // 5Ô∏è‚É£ Ghi d·ªØ li·ªáu v√†o sheet (b·∫Øt ƒë·∫ßu t·ª´ A1)
//     XLSX.utils.sheet_add_aoa(worksheet, [templateHeaders, ...formattedData], {
//       origin: "A1",
//     });
//     // 6Ô∏è‚É£ Xu·∫•t file Excel m·ªõi
//     const updatedFile = XLSX.write(workbook, {
//       bookType: "xlsx",
//       type: "array",
//     });
//     saveAs(new Blob([updatedFile]), "exported_data.xlsx");

//     console.log("‚úÖ Xu·∫•t file th√†nh c√¥ng!");
//   } catch (error) {
//     console.error("‚ùå L·ªói khi xu·∫•t file Excel:", error);
//   }
// };
import ExcelJS from "exceljs";
import { saveAs } from "file-saver";

export const handleExportWithTemplate = async (data) => {
  const workbook = new ExcelJS.Workbook();
  await workbook.xlsx.readFile("public/PO.xlsx"); // ƒê·ªçc file m·∫´u (ƒë·∫£m b·∫£o file c√≥ s·∫µn)

  const worksheet = workbook.getWorksheet(1); // L·∫•y sheet ƒë·∫ßu ti√™n

  // Ghi d·ªØ li·ªáu v√†o c√°c √¥ v√† gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng
  data.forEach((row, rowIndex) => {
    row.forEach((cellValue, colIndex) => {
      const cell = worksheet.getCell(rowIndex + 1, colIndex + 1);
      cell.value = cellValue;
    });
  });

  // Xu·∫•t file m·ªõi d∆∞·ªõi d·∫°ng blob ƒë·ªÉ t·∫£i v·ªÅ tr√¨nh duy·ªát
  const buffer = await workbook.xlsx.writeBuffer();
  const blob = new Blob([buffer], {
    type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
  });
  saveAs(blob, "exported_data.xlsx");
  console.log("‚úÖ File exported successfully!");
};

export default handleExportWithTemplate;
